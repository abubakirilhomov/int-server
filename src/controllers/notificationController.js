const webpush = require("web-push");
const NotificationSubscription = require("../models/notificationModel");

// ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Web Push —Å –¥–æ–º–µ–Ω–æ–º —Ç–≤–æ–µ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
webpush.setVapidDetails(
  "mailto:test@example.com",
  process.env.VAPID_PUBLIC_KEY,
  process.env.VAPID_PRIVATE_KEY,
  "https://mentors-mars.uz"
);

/**
 * üì© –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞
 */
const subscribeUser = async (req, res) => {
  try {
    const { subscription, userId, userType } = req.body;

    if (!subscription || !userId || !userType) {
      return res
        .status(400)
        .json({ success: false, message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏" });
    }

    // üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    const updatedSub = await NotificationSubscription.findOneAndUpdate(
      { userId, userType },
      {
        endpoint: subscription.endpoint,
        keys: subscription.keys,
      },
      { upsert: true, new: true }
    );

    console.log(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è ${userType}: ${userId}`);
    res.status(201).json({ success: true, data: updatedSub });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:", err);
    res.status(500).json({ success: false, message: err.message });
  }
};

/**
 * üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–≥–¥–∞ –∏–Ω—Ç–µ—Ä–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç —É—Ä–æ–∫ ‚Üí —É–≤–µ–¥–æ–º–∏—Ç—å –º–µ–Ω—Ç–æ—Ä–∞
 */
const sendNotificationToUser = async (userId, userType, title, body) => {
  try {
    const subscription = await NotificationSubscription.findOne({ userId, userType });

    if (!subscription) {
      console.log(`‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è ${userType} ${userId}`);
      return;
    }

    const payload = JSON.stringify({ title, body });

    await webpush.sendNotification(subscription, payload);
    console.log(`üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
  } catch (err) {
    if (err.statusCode === 410 || err.statusCode === 404) {
      console.warn(`‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞, —É–¥–∞–ª—è—é ${userType} ${userId}`);
      await NotificationSubscription.deleteOne({ userId, userType });
    } else {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", err.message);
    }
  }
};

/**
 * üß™ –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—á–µ—Ä–µ–∑ Postman –∏–ª–∏ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞)
 * POST /api/notifications/test
 * body: { userId, userType, title, body }
 */
const testNotification = async (req, res) => {
  try {
    const { userId, userType, title, body } = req.body;

    if (!userId || !userType || !title || !body) {
      return res.status(400).json({ message: "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤" });
    }

    await sendNotificationToUser(userId, userType, title, body);
    res.json({ success: true, message: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ:", err);
    res.status(500).json({ success: false, message: err.message });
  }
};

/**
 * üöÆ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
 * DELETE /api/notifications/clear
 */
const clearAllSubscriptions = async (req, res) => {
  try {
    await NotificationSubscription.deleteMany({});
    console.log("üßπ –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã");
    res.json({ success: true, message: "–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—á–∏—â–µ–Ω—ã" });
  } catch (err) {
    res.status(500).json({ success: false, message: err.message });
  }
};

module.exports = {
  subscribeUser,
  sendNotificationToUser,
  testNotification,
  clearAllSubscriptions,
};
